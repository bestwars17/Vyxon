--// Load Library
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/bestwars17/Vyxon/refs/heads/main/Library.txt", true))()
local win = lib:AddWindow("Fixed by Vyxon | Full Hub", {
    main_color = Color3.fromRGB(0, 0, 255),
    min_size = Vector2.new(540, 450),
    can_resize = false,
})

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

--// Global tables for tracking features
getgenv().whitelist = getgenv().whitelist or {}
getgenv().autoRebirth = false
getgenv().farmingMob = false
getgenv().farmingMachine = false
getgenv().fastGlitch = getgenv().fastGlitch or {}
getgenv().fastGlitchV2 = getgenv().fastGlitchV2 or {}
getgenv().autopunch = false
getgenv().fastPunch = false
getgenv().autoKillActive = false
getgenv().fastKillAura = false
getgenv().spyPlayer = false
--// Rebirth Tab
local rebTab = win:AddTab("Rebirth")

-- Rebirth System
local RBCode = loadstring(game:HttpGet("https://raw.githubusercontent.com/bestwars17/Vyxon/refs/heads/main/README.md"))()
local RB = {}
RB.__index = RB
function RB.new(tab)
    local self = setmetatable({}, RB)
    self.on = false
    self.target = 1
    self.tab = tab
    self:ui()
    return self
end

function RB:ui()
    self.input = self.tab:AddTextBox("Target Rebirths", function(v)
        local n = tonumber(v)
        if n and n >= 1 then self.target = n else self.input:Set("") end
    end, { placeholder = "" })

    self.tab:AddSwitch("Auto Rebirth", function(state)
        self.on = state
        if state then self:run() end
    end)
end

function RB:run()
    task.spawn(function()
        local ls = LocalPlayer:WaitForChild("leaderstats")
        local rb = ls and ls:WaitForChild("Rebirths")
        local evt = ReplicatedStorage:WaitForChild("rEvents")
        local remote = evt and evt:WaitForChild("rebirthRemote")
        if not (rb and remote) then self.on = false return end

        while self.on do
            if rb.Value >= self.target then self.on = false break end
            pcall(function() remote:InvokeServer("rebirthRequest") end)
            task.wait(0.2)
        end
    end)
end

local reb = RB.new(rebTab)

--// Main Tab
local mainTab = win:AddTab("Main")

-- WalkSpeed
mainTab:AddTextBox("Player Speed", function(val)
    local num = tonumber(val)
    if num and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = num
    end
end, { placeholder = "WalkSpeed" })

-- JumpPower
mainTab:AddTextBox("Jump Power", function(val)
    local num = tonumber(val)
    if num and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.JumpPower = num
    end
end, { placeholder = "JumpPower" })

-- Anti Knockback
mainTab:AddSwitch("Anti Knockback", function(state)
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:SetAttribute("NoKnockback", state)
    end
end)

-- Lock Position
local lockedPos = nil
mainTab:AddSwitch("Lock Position", function(state)
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if state and hrp then
        lockedPos = hrp.CFrame
        task.spawn(function()
            while state and hrp do
                hrp.CFrame = lockedPos
                task.wait()
            end
        end)
    else
        lockedPos = nil
    end
end)
--// Killer Tab
local killerTab = win:AddTab("Killer")

local whitelist = {}

-- Kill Evil Karma
killerTab:AddSwitch("Kill Evil Karma", function(state)
    task.spawn(function()
        while state do
            for _, p in pairs(Players:GetPlayers()) do
                if p ~= LocalPlayer and not table.find(whitelist, p.Name) and p:FindFirstChild("leaderstats") then
                    local karma = p.leaderstats:FindFirstChild("Karma")
                    if karma and karma.Value < 0 then
                        local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
                        local myHrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if hrp and myHrp then
                            myHrp.CFrame = hrp.CFrame * CFrame.new(0,0,3)
                            local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                            if tool then tool:Activate() end
                        end
                    end
                end
            end
            task.wait(0.2)
        end
    end)
end)

-- Kill Good Karma
killerTab:AddSwitch("Kill Good Karma", function(state)
    task.spawn(function()
        while state do
            for _, p in pairs(Players:GetPlayers()) do
                if p ~= LocalPlayer and not table.find(whitelist, p.Name) and p:FindFirstChild("leaderstats") then
                    local karma = p.leaderstats:FindFirstChild("Karma")
                    if karma and karma.Value > 0 then
                        local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
                        local myHrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if hrp and myHrp then
                            myHrp.CFrame = hrp.CFrame * CFrame.new(0,0,3)
                            local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                            if tool then tool:Activate() end
                        end
                    end
                end
            end
            task.wait(0.2)
        end
    end)
end)

-- Kill Low Strength
local lowStrength = 0
killerTab:AddTextBox("Kill Low Strength <", function(val)
    lowStrength = tonumber(val) or 0
end, { placeholder = "Strength Threshold" })

-- Whitelist User
killerTab:AddTextBox("Whitelist User", function(user)
    if user and user ~= "" and not table.find(whitelist, user) then
        table.insert(whitelist, user)
    end
end, { placeholder = "Add Username" })

-- Auto Kill All
killerTab:AddSwitch("Auto Kill All", function(state)
    task.spawn(function()
        while state do
            for _, p in pairs(Players:GetPlayers()) do
                if p ~= LocalPlayer and not table.find(whitelist, p.Name) then
                    local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
                    local myHrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if hrp and myHrp then
                        myHrp.CFrame = hrp.CFrame * CFrame.new(0,0,3)
                        local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                        if tool then tool:Activate() end
                    end
                end
            end
            task.wait(0.2)
        end
    end)
end)

-- Fast Kill Aura
getgenv().ringAuraRadius = 10
killerTab:AddTextBox("Aura Radius", function(val)
    local num = tonumber(val)
    if num then getgenv().ringAuraRadius = num end
end, { placeholder = "Default 10" })

killerTab:AddSwitch("Fast Kill Aura", function(state)
    getgenv().fastKillAura = state
    task.spawn(function()
        while getgenv().fastKillAura do
            for _, p in pairs(Players:GetPlayers()) do
                if p ~= LocalPlayer and not table.find(whitelist, p.Name) and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - p.Character.HumanoidRootPart.Position).Magnitude
                    if distance <= getgenv().ringAuraRadius then
                        local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                        if tool then tool:Activate() end
                    end
                end
            end
            task.wait(0.05)
        end
    end)
end)

-- Spy Player
getgenv().targetPlayerName = nil
killerTab:AddTextBox("Target Player", function(name)
    getgenv().targetPlayerName = name
end)

killerTab:AddSwitch("Spy Player", function(state)
    getgenv().spyPlayer = state
    task.spawn(function()
        while getgenv().spyPlayer and getgenv().targetPlayerName do
            local target = Players:FindFirstChild(getgenv().targetPlayerName)
            if target and target.Character then
                Workspace.CurrentCamera.CameraSubject = target.Character:FindFirstChildOfClass("Humanoid")
            end
            task.wait(1)
        end
        if LocalPlayer.Character then
            Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        end
    end)
end)
--// Auto Farm Tab
local farmTab = win:AddTab("Auto Farm")

local machines = {
    "Tiny Island Rock", "Punching Rock", "Large Island Rock",
    "Golden Rock", "Frost Gym Rock", "Mythical Gym Rock",
    "Eternal Gym Rock", "Legends Gym Rock", "Muscle King Gym Rock",
    "Ancient Jungle Rock"
}
local selectedMachine = machines[1]
local farmingMachine = false

-- Machine Dropdown
farmTab:AddDropdown("Select Machine", function(option)
    selectedMachine = option
end, { default = selectedMachine, options = machines })

-- Auto Farm Machine
farmTab:AddSwitch("Auto Farm Machine", function(state)
    farmingMachine = state
    if state then
        task.spawn(function()
            while farmingMachine and LocalPlayer.Character do
                local machineObj = workspace:FindFirstChild(selectedMachine)
                if machineObj and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = machineObj.CFrame * CFrame.new(0,0,3)
                    local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                    if tool then tool:Activate() end
                end
                task.wait(0.05) -- سرعة التمرين
            end
        end)
    end
end)

-- Mob Farming
local mobs = {}
local selectedMob = nil
local farmingMob = false

farmTab:AddTextBox("Add Mob Name", function(mobName)
    if mobName and mobName ~= "" and not table.find(mobs, mobName) then
        table.insert(mobs, mobName)
        mobDropdown:UpdateOptions(mobs)
    end
end, { placeholder = "Type Mob Name" })

local mobDropdown = farmTab:AddDropdown("Select Mob", function(mob)
    selectedMob = mob
end, { default = nil, options = mobs })

farmTab:AddSwitch("Auto Farm Mob", function(state)
    farmingMob = state
    if state then
        task.spawn(function()
            while farmingMob and selectedMob and LocalPlayer.Character do
                for _, mob in pairs(workspace:GetDescendants()) do
                    if mob:IsA("Model") and mob.Name == selectedMob and mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") then
                        local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            hrp.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0,0,-3)
                            local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                            if tool then tool:Activate() end
                        end
                        task.wait(0.05) -- سرعة الهجوم
                    end
                end
                task.wait(0.05)
            end
        end)
    end
end)
--// Stats Tab
local statsTab = win:AddTab("Stats")

-- Refresh Leaderstats
statsTab:AddButton("Refresh My Stats", function()
    statsTab:Clear() -- يمسح البيانات القديمة قبل الإضافة
    local ls = plr:FindFirstChild("leaderstats")
    if ls then
        for _, stat in pairs(ls:GetChildren()) do
            statsTab:AddLabel(stat.Name .. ": " .. tostring(stat.Value))
        end
    else
        statsTab:AddLabel("No leaderstats found")
    end
end)

-- Track Custom Player
local customPlayerName = ""
statsTab:AddTextBox("Custom Player Name", function(name)
    customPlayerName = name
end, { placeholder = "Enter player name" })

statsTab:AddButton("Refresh Custom Player Stats", function()
    statsTab:Clear()
    if customPlayerName and customPlayerName ~= "" then
        local target = Players:FindFirstChild(customPlayerName)
        if target and target:FindFirstChild("leaderstats") then
            for _, stat in pairs(target.leaderstats:GetChildren()) do
                statsTab:AddLabel(stat.Name .. ": " .. tostring(stat.Value))
            end
        else
            statsTab:AddLabel("Player not found or no leaderstats")
        end
    end
end)
--// Crystals Tab - Pets & Auras
local crystalsTab = win:AddTab("Crystals")

local uniquePets = {"Infernal Dragon", "Ultra Birdie", "Magic Butterfly", "Aether Spirit Bunny", "Cybernetic Showdown Dragon"}
local epicPets = {"Blue Pheonix", "Golden Pheonix", "Red Firecaster"}
local rarePets = {"Crimson Falcon", "Purple Dragon", "Orange Pegasus"}
local advancedPets = {"Dark Vampy", "Dark Golem", "Green Butterfly"}
local basicPets = {"Blue Birdie", "Orange Hedgehog", "Red Kitty"}

local uniqueAuras = {"Inferno", "Dark Storm", "Dark Lightning"}
local epicAuras = {"Enchanted Mirage", "Unstable Mirage", "Lightning"}
local rareAuras = {"Astral Electro", "Dark Electro", "Ultra Mirage"}
local advancedAuras = {"Purple Nova", "Electro"}
local basicAuras = {"Yellow Aura", "Purple Aura", "Green Aura"}

-- Pets Dropdowns
crystalsTab:AddDropdown("Select Pet (Unique)", function(pet)
    print("Selected Unique Pet: "..pet)
end, { options = uniquePets })

crystalsTab:AddDropdown("Select Pet (Epic)", function(pet)
    print("Selected Epic Pet: "..pet)
end, { options = epicPets })

crystalsTab:AddDropdown("Select Pet (Rare)", function(pet)
    print("Selected Rare Pet: "..pet)
end, { options = rarePets })

crystalsTab:AddDropdown("Select Pet (Advanced)", function(pet)
    print("Selected Advanced Pet: "..pet)
end, { options = advancedPets })

crystalsTab:AddDropdown("Select Pet (Basic)", function(pet)
    print("Selected Basic Pet: "..pet)
end, { options = basicPets })

-- Auras Dropdowns
crystalsTab:AddDropdown("Select Aura (Unique)", function(aura)
    print("Selected Unique Aura: "..aura)
end, { options = uniqueAuras })

crystalsTab:AddDropdown("Select Aura (Epic)", function(aura)
    print("Selected Epic Aura: "..aura)
end, { options = epicAuras })

crystalsTab:AddDropdown("Select Aura (Rare)", function(aura)
    print("Selected Rare Aura: "..aura)
end, { options = rareAuras })

crystalsTab:AddDropdown("Select Aura (Advanced)", function(aura)
    print("Selected Advanced Aura: "..aura)
end, { options = advancedAuras })

crystalsTab:AddDropdown("Select Aura (Basic)", function(aura)
    print("Selected Basic Aura: "..aura)
end, { options = basicAuras })
