--// Vyxon Hub Script (Final)
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/bestwars17/Vyxon/refs/heads/main/Library.txt", true))()
local win = lib:AddWindow("Fixed by Vyxon | Final Hub", {
    main_color = Color3.fromRGB(0, 0, 255),
    min_size = Vector2.new(540, 450),
    can_resize = false,
})

local plrs = game:GetService("Players")
local rs = game:GetService("ReplicatedStorage")
local plr = plrs.LocalPlayer
local ws = game:GetService("Workspace")

--// Rebirth Class
local RBCode = loadstring(game:HttpGet("https://raw.githubusercontent.com/bestwars17/Vyxon/refs/heads/main/README.md"))()
local RB = {}
RB.__index = RB
function RB.new(tab)
    local self = setmetatable({}, RB)
    self.on = false
    self.target = 1
    self.tab = tab
    self:ui()
    return self
end
function RB:ui()
    self.input = self.tab:AddTextBox("Target", function(v)
        local n = tonumber(v)
        if n and n >= 1 then self.target = n else self.input:Set("") end
    end, { placeholder = "" })

    self.tab:AddSwitch("Auto Rebirth", function(s)
        self.on = s
        if s then self:run() end
    end)
end
function RB:run()
    task.spawn(function()
        local ls = plr:WaitForChild("leaderstats")
        local rb = ls and ls:WaitForChild("Rebirths")
        local evt = rs:WaitForChild("rEvents")
        local remote = evt and evt:WaitForChild("rebirthRemote")
        if not (rb and remote) then self.on = false return end

        while self.on do
            if rb.Value >= self.target then self.on = false break end
            pcall(function() remote:InvokeServer("rebirthRequest") end)
            task.wait(0.2)
        end
    end)
end

--// Tabs
local rebTab = win:AddTab("Rebirth")
local mainTab = win:AddTab("Main")
local killerTab = win:AddTab("Killer")
local statsTab = win:AddTab("Stats")
local farmTab = win:AddTab("Auto Farm")
local settingsTab = win:AddTab("Settings")
local crystalsTab = win:AddTab("Crystals")

local reb = RB.new(rebTab)

--// Main Features
mainTab:AddTextBox("Player Speed", function(val)
    local num = tonumber(val)
    if num and plr.Character and plr.Character:FindFirstChild("Humanoid") then
        plr.Character.Humanoid.WalkSpeed = num
    end
end, { placeholder = "WalkSpeed" })

-- Anti Knockback
mainTab:AddSwitch("Anti Knockback", function(bool)
    local humanoid = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:SetAttribute("NoKnockback", bool)
    end
end)

-- Lock Position
local lockedPos = nil
mainTab:AddSwitch("Lock Position", function(bool)
    local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
    if bool and hrp then
        lockedPos = hrp.CFrame
        task.spawn(function()
            while bool and hrp do
                hrp.CFrame = lockedPos
                task.wait()
            end
        end)
    else
        lockedPos = nil
    end
end)

-- Hide Frames
mainTab:AddSwitch("Hide Frames", function(bool)
    for _, frame in pairs(game:GetService("CoreGui"):GetDescendants()) do
        if frame:IsA("Frame") then
            frame.Visible = not bool
        end
    end
end)

-- Anti Ping
mainTab:AddSwitch("Anti Ping", function(bool)
    if bool then
        task.spawn(function()
            while bool do
                if plr and plr.Character then
                    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.Velocity = Vector3.new(0,0,0)
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end)

-- Teleport to Gym
mainTab:AddSwitch("Teleport to Gym Area", function(bool)
    if bool then
        local gyms = { "Tiny Island", "Frozen Gym", "Mystic Gym", "Eternal Gym", "Legends Gym", "Muscle King Gym", "Jungle Gym" }
        local gym = gyms[math.random(1,#gyms)]
        -- teleport logic if needed
    end
end)

--// Killer Features
local whitelist = {}
local lowStrength = 0

-- Kill by Karma
local function killPlayers(condition)
    for _, p in pairs(plrs:GetPlayers()) do
        if p ~= plr and not table.find(whitelist,p.Name) and p:FindFirstChild("leaderstats") then
            local hrp = p.Character and p.Character:FindFirstChild("HumanoidRootPart")
            local myHrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
            if hrp and myHrp then
                local karma = p.leaderstats:FindFirstChild("Karma")
                local str = p.leaderstats:FindFirstChild("Strength")
                if (condition == "evil" and karma and karma.Value<0) or
                   (condition == "good" and karma and karma.Value>0) or
                   (condition == "lowStrength" and str and str.Value<lowStrength) then
                    plr.Character.HumanoidRootPart.CFrame = hrp.CFrame*CFrame.new(0,0,3)
                    local tool = plr.Character:FindFirstChildOfClass("Tool")
                    if tool then tool:Activate() end
                end
            end
        end
    end
end

killerTab:AddSwitch("Kill Evil Karma", function(bool)
    task.spawn(function()
        while bool do
            killPlayers("evil")
            task.wait(0.2)
        end
    end)
end)

killerTab:AddSwitch("Kill Good Karma", function(bool)
    task.spawn(function()
        while bool do
            killPlayers("good")
            task.wait(0.2)
        end
    end)
end)

killerTab:AddTextBox("Kill Low Strength <", function(val)
    lowStrength = tonumber(val) or 0
end, { placeholder = "Strength Threshold" })

killerTab:AddTextBox("Whitelist User", function(user)
    if user and user~="" and not table.find(whitelist,user) then
        table.insert(whitelist,user)
    end
end, { placeholder = "Add Username" })

killerTab:AddSwitch("Auto Kill All", function(bool)
    task.spawn(function()
        while bool do
            killPlayers("evil")
            killPlayers("good")
            killPlayers("lowStrength")
            task.wait(0.2)
        end
    end)
end)

--// Auto Farm
local machines = { "Muscle King Bench", "Muscle King Lift", "Muscle King Teleportal" }
local selectedMachine = machines[1]
local farmingMachine = false

farmTab:AddDropdown("Select Machine", function(opt)
    selectedMachine = opt
end, { default = machines[1], options = machines })

farmTab:AddSwitch("Auto Farm Machine", function(bool)
    farmingMachine = bool
    if bool then
        task.spawn(function()
            while farmingMachine do
                local machine = ws:FindFirstChild(selectedMachine)
                local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
                if machine and hrp then
                    hrp.CFrame = machine.CFrame*CFrame.new(0,0,3)
                    local tool = plr.Character:FindFirstChildOfClass("Tool")
                    if tool then tool:Activate() end
                end
                task.wait(0.05)
            end
        end)
    end
end)

-- Auto Farm Mob
local mobs = {}
local selectedMob = nil
local farmingMob = false

farmTab:AddTextBox("Mob Name", function(mobName)
    if mobName and mobName~="" and not table.find(mobs,mobName) then
        table.insert(mobs,mobName)
        mobDropdown:UpdateOptions(mobs)
    end
end, { placeholder = "Type Mob Name to Save" })

local mobDropdown = farmTab:AddDropdown("Select Mob", function(mob)
    selectedMob = mob
end, { default = nil, options = mobs })

farmTab:AddSwitch("Auto Farm Mob", function(enabled)
    farmingMob = enabled
    if enabled then
        task.spawn(function()
            while farmingMob and selectedMob do
                for _, mob in pairs(ws:GetDescendants()) do
                    if mob:IsA("Model") and mob.Name==selectedMob and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") then
                        local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
                        if hrp then
                            hrp.CFrame = mob.HumanoidRootPart.CFrame*CFrame.new(0,0,-3)
                            local tool = plr.Character:FindFirstChildOfClass("Tool")
                            if tool then tool:Activate() end
                        end
                        task.wait(0.05)
                    end
                end
                task.wait(0.05)
            end
        end)
    end
end)

--// Stats Tracking
statsTab:AddLabel("Track Stats")
statsTab:AddTextBox("Custom User (Name)", function(name)
    -- optional load stats logic
end)

statsTab:AddButton("Refresh Stats", function()
    local ls = plr:FindFirstChild("leaderstats")
    if ls then
        for _, stat in pairs(ls:GetChildren()) do
            statsTab:AddLabel(stat.Name..": "..tostring(stat.Value))
        end
    end
end)

--// Crystals Tab
local uniquePets = {"Infernal Dragon","Ultra Birdie","Magic Butterfly","Aether Spirit Bunny","Cybernetic Showdown Dragon","Darkstar Hunter","Hank","Gold Warrior","Sky Hawk","Cool Guy","Larry","Screaming Bones","Muscle Sensei","Neon Guardian"}
local epicPets = {"Blue Pheonix","Blue Firecaster","Golden Pheonix","Red Firecaster","Golden Pheonix","Green Firecaster","White Pheonix","Dark Legends Manticore","Ultimate Supernova Pegasus","Lightning Strike Phantom","Mask Of Gold","A. Gnatomy","Sir Flame","Masked Marksman","Golden Viking"}
local rarePets = {"Crimson Falcon","Purple Dragon","Orange Pegasus","Purple Falcon","Red Dragon","White Pegasus","Frostwave Legends","Penguin Phantom","Genesis Dragon","Eternal Strike","Leviathan","Green-Fly","Ice Ice","Slitherman","Mr. Serious","Boy Wonder"}
local advancedPets = {"Dark Vampy","Dark Golem","Green Butterfly","Yellow Butterfly","Alien Girl","Smiley Chops"}
local basicPets = {"Blue Birdie","Orange Hedgehog","Red Kitty","Blue Bunny","Silver Dog"}

local uniqueAuras = {"Inferno","Dark Storm","Dark Lightning","Muscle King","Eternal Megastrike","Entropic Blast"}
local epicAuras = {"Enchanted Mirage","Unstable Mirage","Lightning","Azure Tundra","Grand Supernova"}
local rareAuras = {"Astral Electro","Dark Electro","Ultra Mirage","Supernova","Power Lightning","Ultra Inferno"}
local advancedAuras = {"Purple Nova","Electro"}
local basicAuras = {"Yellow Aura","Purple Aura","Green Aura","Blue Aura","Red Aura"}

crystalsTab:AddDropdown("Select Pet (Unique)", function(pet) end, { options=uniquePets })
crystalsTab:AddDropdown("Select Pet (Epic)", function(pet) end, { options=epicPets })
crystalsTab:AddDropdown("Select Pet (Rare)", function(pet) end, { options=rarePets })
crystalsTab:AddDropdown("Select Pet (Advanced)", function(pet) end, { options=advancedPets })
crystalsTab:AddDropdown("Select Pet (Basic)", function(pet) end, { options=basicPets })

crystalsTab:AddDropdown("Select Aura (Unique)", function(aura) end, { options=uniqueAuras })
crystalsTab:AddDropdown("Select Aura (Epic)", function(aura) end, { options=epicAuras })
crystalsTab:AddDropdown("Select Aura (Rare)", function(aura) end, { options=rareAuras })
crystalsTab:AddDropdown("Select Aura (Advanced)", function(aura) end, { options=advancedAuras })
crystalsTab:AddDropdown("Select Aura (Basic)", function(aura) end, { options=basicAuras })
