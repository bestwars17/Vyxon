--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Lighting = game:GetService("Lighting")

local LocalPlayer = Players.LocalPlayer

-- Safe loader for external UI library
local function safeLoad(url)
    local ok, res = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    if not ok then warn("Failed to load lib:", res) return nil end
    return res
end

local lib = safeLoad("https://raw.githubusercontent.com/bestwars17/Vyxon/refs/heads/main/Library.txt")
if not lib then return end

-- Window
local win = lib:AddWindow("Vyxon Hub | Full Version", {
    main_color = Color3.fromRGB(20,20,20),
    min_size = Vector2.new(560,620),
    toggle_key = Enum.KeyCode.RightShift
})

-- TABS
local ServerTab = win:AddTab("Server")
local CombatTab = win:AddTab("Combat")
local FarmTab = win:AddTab("Farm++")
local SocialTab = win:AddTab("Social")
local QoLTab = win:AddTab("QoL")
local DebugTab = win:AddTab("Debug")
--// Helper function for notifications
local function notify(txt)
    pcall(function()
        StarterGui:SetCore("SendNotification",{Title="Vyxon", Text=txt, Duration=3})
    end)
    print("[Vyxon]", txt)
end

-- Rate Limiter
local RateLimiter = { last = {} }
function RateLimiter:allow(key,minGap)
    local now = os.clock()
    local last = self.last[key] or 0
    if now - last >= (minGap or 0.1) then
        self.last[key] = now
        return true
    end
    return false
end

-- Safe remote finder
local function findIn(parent, pathArray)
    local node = parent
    for _,name in ipairs(pathArray) do
        node = node and node:FindFirstChild(name)
        if not node then return nil end
    end
    return node
end

local REMOTE_PATHS = {
    Rebirth = {"rEvents","rebirthRemote"},
    MuscleEvent = {"muscleEvent"},
    JoinBrawl = {"rEvents","joinBrawl"},
    UseMachine = {"rEvents","useMachine"}
}

-- SERVER TAB
ServerTab:AddSwitch("Fast Rebirths (safe)", function(state)
    notify("Fast Rebirths: "..tostring(state))
    getgenv().fastRebirths = state
    task.spawn(function()
        while getgenv().fastRebirths do
            if RateLimiter:allow("Rebirth",0.15) then
                local rf = findIn(ReplicatedStorage,REMOTE_PATHS.Rebirth)
                if rf then
                    pcall(function() rf:InvokeServer("rebirthRequest") end)
                end
            end
            task.wait(0.05)
        end
    end)
end)

ServerTab:AddButton("Join Brawl (safe)", function()
    local ev = findIn(ReplicatedStorage,REMOTE_PATHS.JoinBrawl)
    if ev then pcall(function() ev:FireServer() end) end
    notify("Join Brawl pressed")
end)

ServerTab:AddButton("Reset Character", function()
    local char = LocalPlayer.Character
    if char then char:BreakJoints() notify("Character reset") end
end)

-- COMBAT TAB
CombatTab:AddSwitch("Auto Punch (safe)", function(state)
    notify("Auto Punch: "..tostring(state))
    getgenv().autoPunch = state
    task.spawn(function()
        while getgenv().autoPunch do
            if RateLimiter:allow("Punch",0.05) then
                local char = LocalPlayer.Character
                local tool = char and char:FindFirstChildOfClass("Tool")
                if tool and tool.Activate then pcall(function() tool:Activate() end) end
            end
            task.wait(0.05)
        end
    end)
end)

CombatTab:AddSwitch("Auto Equip Punch", function(state)
    notify("Auto Equip Punch: "..tostring(state))
    getgenv().autoEquipPunch = state
    task.spawn(function()
        while getgenv().autoEquipPunch do
            local backpack = LocalPlayer:FindFirstChild("Backpack")
            local char = LocalPlayer.Character
            if backpack and char and char:FindFirstChildOfClass("Humanoid") then
                local punch = backpack:FindFirstChild("Punch")
                if punch then pcall(function() char.Humanoid:EquipTool(punch) end) end
            end
            task.wait(1)
        end
    end)
end)

-- SOCIAL TAB
SocialTab:AddTextbox("View Player (exact name)", function(target)
    target = tostring(target or ""):gsub("^%s+",""):gsub("%s+$","")
    if target=="" then return end
    local plr = Players:FindFirstChild(target)
    local char = plr and plr.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if hum then
        workspace.CurrentCamera.CameraSubject = hum
        notify("Viewing: "..target)
    end
end)

SocialTab:AddButton("Unview", function()
    local char = LocalPlayer.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if hum then
        workspace.CurrentCamera.CameraSubject = hum
        notify("Camera reset to self")
    end
end)

SocialTab:AddTextbox("Spy Stats (player name)", function(target)
    target = tostring(target or ""):gsub("^%s+",""):gsub("%s+$","")
    if target=="" then return end
    local plr = Players:FindFirstChild(target)
    local ls = plr and plr:FindFirstChild("leaderstats")
    if not ls then return notify("No leaderstats found") end
    local out = {}
    for _,stat in ipairs(ls:GetChildren()) do
        table.insert(out, stat.Name..":"..tostring(stat.Value))
    end
    notify("Stats("..target.."): "..table.concat(out,", "))
end)

-- QOL TAB
QoLTab:AddButton("ShiftLock ON", function()
    pcall(function() LocalPlayer.DevEnableMouseLock = true end)
    notify("ShiftLock enabled")
end)

QoLTab:AddButton("Lighting: Morning", function()
    pcall(function() Lighting.ClockTime=8 end)
    notify("Lighting set to Morning")
end)

QoLTab:AddButton("Lighting: Day", function()
    pcall(function() Lighting.ClockTime=12 end)
    notify("Lighting set to Day")
end)

QoLTab:AddButton("Lighting: Night", function()
    pcall(function() Lighting.ClockTime=20 end)
    notify("Lighting set to Night")
end)
--// FARM TAB (Auto Farm 50 Threads)
local autoFarmActive = false
local training = false
local threads = {}

local function startTraining()
    if training then return end
    training = true
    for _ = 1,50 do
        local thread = task.spawn(function()
            while autoFarmActive and training do
                local ev = findIn(ReplicatedStorage, REMOTE_PATHS.MuscleEvent)
                if ev then
                    pcall(function() ev:FireServer("rep") end)
                end
                task.wait(0)
            end
        end)
        table.insert(threads, thread)
    end
end

local function stopTraining()
    training = false
    threads = {}
end

FarmTab:AddSwitch("Auto Farm (equipped tool)", function(state)
    notify("Auto Farm: "..tostring(state))
    getgenv().autoFarm = state
    autoFarmActive = state
    if autoFarmActive then
        startTraining()
    else
        stopTraining()
    end
end)

-- Jungle Gym (safe stubs)
local jungleGymMachines = {"Jungle Bench","Jungle Bar Lift","Jungle Boulder"}
local JungleFolder = FarmTab:AddFolder("Auto Gym | Jungle (safe stubs)")
for _,machine in ipairs(jungleGymMachines) do
    JungleFolder:AddSwitch(machine, function(state)
        notify(machine..": "..tostring(state))
        getgenv()["gym_"..machine] = state
        task.spawn(function()
            while getgenv()["gym_"..machine] do
                local ev = findIn(ReplicatedStorage, REMOTE_PATHS.MuscleEvent)
                if ev then
                    pcall(function() ev:FireServer("gym",machine) end)
                end
                task.wait(0.05)
            end
        end)
    end)
end

-- SERVER TAB Remote Actions (for completeness)
ServerTab:AddButton("Join Brawl", function()
    local ev = findIn(ReplicatedStorage, REMOTE_PATHS.JoinBrawl)
    if ev then pcall(function() ev:FireServer() end) end
    notify("Join Brawl fired")
end)

ServerTab:AddButton("Rebirth (manual)", function()
    local rf = findIn(ReplicatedStorage, REMOTE_PATHS.Rebirth)
    if rf then pcall(function() rf:InvokeServer("rebirthRequest") end) end
    notify("Rebirth fired")
end)
-- DEBUG TAB
DebugTab:AddButton("List candidate remotes", function()
    local function listChildren(obj, depth)
        depth = depth or 0
        local prefix = string.rep("  ", depth)
        for _, child in ipairs(obj:GetChildren()) do
            print(prefix.."- "..child.Name, child.ClassName)
            listChildren(child, depth+1)
        end
    end
    print("[Vyxon] ReplicatedStorage tree:")
    listChildren(ReplicatedStorage,0)
    notify("Printed ReplicatedStorage tree to Output")
end)

DebugTab:AddLabel("Auto Farm Active: false")
DebugTab:AddLabel("Threads count: 50")
DebugTab:AddLabel("Vyxon Hub | Full Version Ready")
